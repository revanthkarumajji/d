[
  {
    "objectID": "Skills.html",
    "href": "Skills.html",
    "title": "SKills",
    "section": "",
    "text": "While I was part of student union, I developed this skill through organizing various events, coordinating meeting and balancing my time between these responsibilities and my study."
  },
  {
    "objectID": "midproject.html",
    "href": "midproject.html",
    "title": "Mid Project",
    "section": "",
    "text": "In my future role as a data analyst, it’s crucial for me to grasp the significance of graphs as tools for visualizing analyzed information, especially for people who aren’t familiar with the subject. However, it’s equally important to recognize that graphs can sometimes mislead or manipulate audiences by conveying false information. As a data analyst, choosing the right type of graph is a critical decision because a poorly chosen one can completely alter the interpretation of the analysis.\nLet me explain this with an example: Imagine you’re analyzing sales data for a company, and you want to illustrate the sales performance over time. You could choose to represent this data using a line graph, a bar graph, or even a pie chart. Each type of graph would present the information differently, potentially leading to different conclusions. If you mistakenly choose a pie chart instead of a line graph, it might make the sales appear more evenly distributed than they actually are, giving a false impression of the company’s performance.\nNow, let’s talk about a project I’ve been working on. I came across a poorly designed graph that was unclear and possibly misleading. So, I took the initiative to redesign it, making it more straightforward, easy to understand, and ensuring that it accurately represents the data without any manipulation. This way, the reader gets a clear and truthful picture of the content without being misled by the visual representation.\n\n\n\n\n\nWhen you first look at the chart, it might seem alright, but actually, there are quite a few issues with it.\nOne big problem is with the Y-axis, the vertical line on the left side. It’s broken, and the numbers on it don’t make sense. For example, it goes from $100 million to $700 million, then suddenly jumps to $1.7 billion. This makes it look like $490 million is more than $1.2 billion, which isn’t right at all!\nAlso, when you glance at the chart, it seems like the TV revenue and government funding are about the same. This is because the blue and pink parts of the bars look almost equal in length. But that’s just because the Y-axis is messed up.\nAnother issue is that the bars for revenue and advertising shouldn’t be separate from the main bar showing total income. They’re not separate things; they’re just parts of the total income. But here, they’re showing it as if they’re different things, which can be confusing.\n\n\n\n\n\n\nI’ve redesigned the graph to fix the above mentioned issues and even made it interactive. This means that when you look at it, you can click on different parts and get more information. This makes it easier for people to understand and engage with the data.\nHere is the link to the video where I discussed my project in detail:\nReference for the Bad Graph:\n[Funding of a broadcast company in two financial years ](https://cbc.radio-canada.ca/en/impact-and-accountability/finance/annual-reports/ar-2018-2019/financial-sustainability/revenue-and-other-funds)"
  },
  {
    "objectID": "midproject.html#bad-graph-chosen",
    "href": "midproject.html#bad-graph-chosen",
    "title": "Mid Project",
    "section": "",
    "text": "When you first look at the chart, it might seem alright, but actually, there are quite a few issues with it.\nOne big problem is with the Y-axis, the vertical line on the left side. It’s broken, and the numbers on it don’t make sense. For example, it goes from $100 million to $700 million, then suddenly jumps to $1.7 billion. This makes it look like $490 million is more than $1.2 billion, which isn’t right at all!\nAlso, when you glance at the chart, it seems like the TV revenue and government funding are about the same. This is because the blue and pink parts of the bars look almost equal in length. But that’s just because the Y-axis is messed up.\nAnother issue is that the bars for revenue and advertising shouldn’t be separate from the main bar showing total income. They’re not separate things; they’re just parts of the total income. But here, they’re showing it as if they’re different things, which can be confusing."
  },
  {
    "objectID": "midproject.html#redesigned-plots",
    "href": "midproject.html#redesigned-plots",
    "title": "Mid Project",
    "section": "",
    "text": "I’ve redesigned the graph to fix the above mentioned issues and even made it interactive. This means that when you look at it, you can click on different parts and get more information. This makes it easier for people to understand and engage with the data.\nHere is the link to the video where I discussed my project in detail:\nReference for the Bad Graph:\n[Funding of a broadcast company in two financial years ](https://cbc.radio-canada.ca/en/impact-and-accountability/finance/annual-reports/ar-2018-2019/financial-sustainability/revenue-and-other-funds)"
  },
  {
    "objectID": "code.html",
    "href": "code.html",
    "title": "Mid Project",
    "section": "",
    "text": "This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\n# Load necessary libraries\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n# Create example data\ndata &lt;- data.frame(\n  Category = c(\"2017-2018\", \"2018-2019\"),\n  Total = c(1780.8, 1703.8),\n  Government_Funding = c(1213.7, 1207.7),\n  Revenue = c(490.1, 573.1),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Advertising = c(248.8, 275.7),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data\ndata_long &lt;- tidyr::pivot_longer(data, cols = c(Government_Funding,Financing_and_other_income, Subscription_fee,Digital, Television), names_to = \"Subcategory\", values_to = \"Value\")\n\n# Plot\nggplot(data_long, aes(x = Category, y = Value, fill = Subcategory)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  coord_flip() +  # Flip the coordinates for horizontal bars\n  geom_bar(data = data, aes(x = Category, y = Total), stat = \"identity\", fill = \"transparent\") +\n  theme_minimal()+\n  labs(y = \"Value (in millions)\", x = \"Year\")\n\n\n\n\n\nlibrary(ggplot2)\n\n# Create example data\ndata &lt;- data.frame(\n  Category = c(\"2017-2018\", \"2018-2019\"),\n  Total = c(1780.8, 1703.8),\n  Government_Funding = c(1213.7, 1207.7),\n  Revenue = c(490.1, 573.1),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Advertising = c(248.8, 275.7),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data\ndata_long &lt;- tidyr::pivot_longer(data, cols = c(Government_Funding, Financing_and_other_income, Subscription_fee, Digital, Television), names_to = \"Subcategory\", values_to = \"Value\")\n\n# Determine the order of stacking\nstacking_order &lt;- c(\"Government_Funding\", \"Financing_and_other_income\", \"Subscription_fee\", \"Television\", \"Digital\")\n\n# Convert Subcategory to factor and set levels according to stacking order\ndata_long$Subcategory &lt;- factor(data_long$Subcategory, levels = stacking_order)\n\n\n\n# Plot\nggplot(data_long, aes(x = Category, y = Value, fill = Subcategory)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  coord_flip() +  # Flip the coordinates for horizontal bars\n  geom_bar(data = data, aes(x = Category, y = Total), stat = \"identity\", fill = \"transparent\") +\n  theme_minimal()\n\n\n\n\n\nlibrary(ggplot2)\nlibrary(plotly)\n\nWarning: package 'plotly' was built under R version 4.3.3\n\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n# Create example data\ndata &lt;- data.frame(\n  Category = c(\"2017-2018\", \"2018-2019\"),\n  Total = c(1780.8, 1703.8),\n  Government_Funding = c(1213.7, 1207.7),\n  Revenue = c(490.1, 573.1),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Advertising = c(248.8, 275.7),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data\ndata_long &lt;- tidyr::pivot_longer(data, cols = c(Government_Funding, Financing_and_other_income, Subscription_fee, Digital, Television), names_to = \"Subcategory\", values_to = \"Value\")\n\n# Determine the order of stacking\nstacking_order &lt;- c(\"Government_Funding\", \"Financing_and_other_income\", \"Subscription_fee\", \"Television\", \"Digital\")\n\n# Convert Subcategory to factor and set levels according to stacking order\ndata_long$Subcategory &lt;- factor(data_long$Subcategory, levels = stacking_order)\n\n# Function to create the plot\ncreate_plot &lt;- function(data, selected_option, selected_year) {\n  p &lt;- ggplot(data, aes(x = Category, y = Value, fill = Subcategory)) +\n    geom_bar(stat = \"identity\", position = \"stack\") +\n    coord_flip() +\n    theme_minimal() +\n    labs(title = selected_option)\n  \n  return(p)\n}\n\n# Create interactive plot\nplotly_plot &lt;- ggplotly(create_plot(data_long, \"Total\"), dynamicTicks = TRUE) %&gt;%\n  layout(\n    updatemenus = list(\n      list(\n        buttons = list(\n          list(method = \"update\", args = list(list(visible = list(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE))), label = \"Total\"),\n          list(method = \"update\", args = list(list(visible = list(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE))), label = \"Government Funding\"),\n          list(method = \"update\", args = list(list(visible = list(FALSE,TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE))), label = \"Revenue\"),\n          list(method = \"update\", args = list(list(visible = list(FALSE,FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE))), label = \"Advertising\")\n        ),\n        x = 0.1,\n        xanchor = \"left\",\n        y = 1.15,\n        yanchor = \"top\",\n        font = list(size = 12)\n      ),\n      list(\n        buttons = list(\n          list(method = \"update\", args = list(list(visible = list(TRUE, TRUE))), label = \"\"),\n          list(method = \"update\", args = list(list(visible = list(TRUE, TRUE))), label = \"\")\n        ),\n        x = 0.3,\n        xanchor = \"left\",\n        y = 1.15,\n        yanchor = \"top\",\n        font = list(size = 12)\n      )\n    )\n  )\n\nplotly_plot\n\n\n\n\n\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Sample data\ndf &lt;- data.frame(\n  Year = c(\"2018-2019\", \"2017-2018\"),\n  `Government Funding` = c(1213.7, 1207.7),\n  `Financing_and_other_income` = c(116.9, 127.6),\n  `Subscription_fee` = c(124.4, 127.2),\n  `Digital` = c(31.0, 42.6),\n  `Television` = c(217.8, 275.7)\n)\n\n# Calculate total revenue for each year\ndf$Revenue &lt;- rowSums(df[, c(\"Financing_and_other_income\", \"Subscription_fee\", \"Digital\", \"Television\")])\n\n# Reshape the data using pivot_longer\ndf_long &lt;- df %&gt;%\n  pivot_longer(cols = -Year, names_to = \"group\", values_to = \"value\") %&gt;%\n  mutate(group = case_when(\n    group %in% c(\"Government Funding\", \"Revenue\") ~ \"Total\",\n    TRUE ~ group\n  ))\n\n# Create a ggplot object\np &lt;- ggplot(df_long, aes(x = Year, y = value, fill = group)) +\n  geom_bar(stat = \"identity\", position = \"stack\", width = 0.7) +\n  \n  scale_y_continuous(labels = scales::comma_format()) +\n  labs(title = \"Funding and Revenue Comparison\",\n       y = \"Count (in millions)\",\n       x = \"Year\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")\n\n# Convert ggplot object to plotly\nplotly_plot &lt;- ggplotly(p, tooltip = c(\"x\", \"y\")) \n\n# Show the interactive plot\nplotly_plot\n\n\n\n\n\n\nlibrary(plotly)\nlibrary(dplyr)\n\n# Sample data\ndf &lt;- data.frame(\n  Year = c(\"2018-2019\", \"2017-2018\"),\n  `Government_Funding` = c(1213.7, 1207.7),\n  `Revenue` = c(490.1, 573.1),\n  `Financing_and_other_income` = c(116.9, 127.6),\n  `Subscriber_fee` = c(124.4, 127.2),\n  `Advertising` = c(248.8, 275.7),\n  `Digital` = c(31, 42.6),\n  `Television` = c(217.8, 275.7)\n)\n\n# Reshape the data\ndf_long &lt;- df %&gt;%\n  pivot_longer(cols = -Year, names_to = \"group\", values_to = \"value\") %&gt;%\n  mutate(group = case_when(\n    group == \"Government_Funding\" ~ \"Government Funding\",\n    group == \"Revenue\" ~ \"Revenue\",\n    group == \"Financing_and_other_income\" ~ \"Financing and other income\",\n    group == \"Subscriber_fee\" ~ \"Subscriber fee\",\n    group == \"Advertising\" ~ \"Advertising\",\n    group == \"Digital\" ~ \"Digital\",\n    group == \"Television\" ~ \"Television\"\n  ))\n\n# Create interactive stacked bar chart\nplot &lt;- plot_ly(df_long, x = ~Year, y = ~value, type = 'bar', color = ~group,\n                text = ~paste(\"Value: \", value),\n                hoverinfo = \"text\") %&gt;%\n  layout(\n    title = \"Government Funding and Revenue Comparison\",\n    xaxis = list(title = \"Year\"),\n    yaxis = list(title = \"Count (in millions)\"),\n    barmode = 'stack',\n    showlegend = TRUE\n  )\n\n# Add dropdown selectors for transparency\nplot &lt;- plot %&gt;%\n  layout(\n    updatemenus = list(\n      list(\n        buttons = list(\n          list(args = list(\"opacity\", 1), label = \"Full opacity\", method = \"restyle\"),\n          list(args = list(\"opacity\", 0.7), label = \"70% opacity\", method = \"restyle\"),\n          list(args = list(\"opacity\", 0.5), label = \"50% opacity\", method = \"restyle\"),\n          list(args = list(\"opacity\", 0.3), label = \"30% opacity\", method = \"restyle\"),\n          list(args = list(\"opacity\", 0), label = \"No opacity\", method = \"restyle\")\n        ),\n        x = 0.9,\n        y = 1.2,\n        direction = \"down\",\n        showactive = TRUE\n      )\n    )\n  )\n\n# Show the plot\nplot\n\n\n\n\n\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Sample data\ndf &lt;- data.frame(\n  Year = c(\"2018-2019\", \"2017-2018\"),\n  Government_Funding = c(1213.7, 1207.7),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data using pivot_longer\ndf_long &lt;- df %&gt;%\n  pivot_longer(cols = -Year, names_to = \"Category\", values_to = \"Value\") \n\n# Plotting using ggplot\np &lt;- ggplot(df_long, aes(x = Category, y = Value, color = Year, group = Year)) +\n  geom_line() +\n  geom_point() +\n  labs(title = \"Funding and Revenue Comparison\",\n       y = \"Value\",\n       x = \"Category\") +\n  theme_minimal()+\n       theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Convert ggplot object to plotly\nplotly_plot &lt;- ggplotly(p, tooltip = c(\"x\", \"y\")) \n\n# Show the interactive plot\nplotly_plot\n\n\n\n\n\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(shiny)\n\nWarning: package 'shiny' was built under R version 4.3.3\n\n# Sample data\ndf &lt;- data.frame(\n  Year = c(\"2018-2019\", \"2017-2018\"),\n  Government_Funding = c(1213.7, 1207.7),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data using pivot_longer\ndf_long &lt;- df %&gt;%\n  pivot_longer(cols = -Year, names_to = \"Category\", values_to = \"Value\") \n\n# UI for Shiny app\nui &lt;- fluidPage(\n  titlePanel(\"Funding and Revenue Comparison\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"year\", \"Select Year:\", choices = unique(df$Year))\n    ),\n    mainPanel(\n      plotlyOutput(\"plot\")\n    )\n  )\n)\n\n# Server logic for Shiny app\nserver &lt;- function(input, output) {\n  filtered_data &lt;- reactive({\n    df_long %&gt;%\n      filter(Year == input$year)\n  })\n  \n  output$plot &lt;- renderPlotly({\n    p &lt;- ggplot(filtered_data(), aes(x = Category, y = Value, color = Year, group = Year)) +\n      geom_line() +\n      geom_point() +\n      labs(title = paste(\"Funding and Revenue Comparison for\", input$year),\n           y = \"Value\",\n           x = \"Category\") +\n      theme_minimal()+\n       theme(axis.text.x = element_text(angle = 45, hjust = 1))\n    \n    ggplotly(p, tooltip = c(\"x\", \"y\")) \n  })\n}\n\n# Run the Shiny app\nshinyApp(ui = ui, server = server)\n\nShiny applications not supported in static R Markdown documents\n\n\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(shiny)\n\n# Sample data\ndf &lt;- data.frame(\n  Year = c(\"2018-2019\", \"2017-2018\")\n  ,\n  Government_Funding = c(1213.7, 1207.7),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data using pivot_longer\ndf_long &lt;- df %&gt;%\n  pivot_longer(cols = -Year, names_to = \"Category\", values_to = \"Value\") \n\n# UI for Shiny app\nui &lt;- fluidPage(\n  titlePanel(\"Funding and Revenue Comparison\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"year\", \"Select Year:\", choices = unique(df$Year)),\n      selectInput(\"revenue\", \"Select Revenue Components:\", \n                  choices = c(\"Financing_and_other_income\", \n                              \"Subscription_fee\", \n                              \"Digital\", \n                              \"Television\"))\n    ),\n    mainPanel(\n      plotlyOutput(\"plot\")\n    )\n  )\n)\n\n# Server logic for Shiny app\nserver &lt;- function(input, output) {\n  filtered_data &lt;- reactive({\n    df_long %&gt;%\n      filter(Year == input$year)\n  })\n  \n  revenue_data &lt;- reactive({\n    df_long %&gt;%\n      filter(Year == input$year & Category == input$revenue)\n  })\n  \n  output$plot &lt;- renderPlotly({\n    p &lt;- ggplot(filtered_data(), aes(x = Category, y = Value, color = Year, group = Year)) +\n      geom_line() +\n      geom_point() +\n      geom_line(data = revenue_data(), aes(group = NULL), color = \"black\", size = 1.5) +\n      geom_point(data = revenue_data(), color = \"black\", size = 3) +\n      labs(title = paste(\"Funding and Revenue Comparison for\", input$year),\n           y = \"Value\",\n           x = \"Category\") +\n      theme_minimal() +\n      theme(axis.text.x = element_text(angle = 45, hjust = 1))\n    \n    ggplotly(p, tooltip = c(\"x\", \"y\")) \n  })\n}\n\n# Run the Shiny app\nshinyApp(ui = ui, server = server)\n\nShiny applications not supported in static R Markdown documents\n\n\n\nserver &lt;- function(input, output) {\n  filtered_data &lt;- reactive({\n    df_long %&gt;%\n      filter(Year == input$year)\n  })\n  \n  revenue_data &lt;- reactive({\n    if (!is.null(input$type) && input$type == \"Revenue\") {\n      df_long %&gt;%\n        filter(Category != \"Government_Funding\", Year == input$year)\n    } \n    else if (!is.null(input$type) && input$type == \"Advertising\") {\n      df_long %&gt;%\n        filter(Category %in% c(\"Digital\",\"Television\"), Year == input$year)\n    }\n  })\n  \n  output$plot &lt;- renderPlotly({\n    p &lt;- ggplot(filtered_data(), aes(x = Category, y = Value, color = Year, group = Year)) +\n      geom_line() +\n      geom_point() +\n      geom_point(data = revenue_data(), color = \"black\", size = 3) +\n      labs(title = paste(\"Funding and Revenue Comparison for\", input$year),\n           y = \"Value\",\n           x = \"Category\") +\n      theme_minimal() +\n      theme(axis.text.x = element_text(angle = 45, hjust = 1))\n    \n    if (!is.null(input$type)) {\n      if (input$type == \"Revenue\") {\n        p &lt;- p + geom_line(data = revenue_data(), aes(group = Year), color = \"black\", size = 1.5)\n      } else if (input$type == \"Advertising\") {\n        p &lt;- p + geom_line(data = revenue_data(), aes(group = Year), color = \"black\", size = 1)\n      }\n    }\n    \n    ggplotly(p, tooltip = c(\"x\", \"y\")) \n  })\n}\n\n# Run the Shiny app\nshinyApp(ui = ui, server = server)\n\nShiny applications not supported in static R Markdown documents"
  },
  {
    "objectID": "code.html#r-markdown",
    "href": "code.html#r-markdown",
    "title": "Mid Project",
    "section": "",
    "text": "This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\n# Load necessary libraries\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n# Create example data\ndata &lt;- data.frame(\n  Category = c(\"2017-2018\", \"2018-2019\"),\n  Total = c(1780.8, 1703.8),\n  Government_Funding = c(1213.7, 1207.7),\n  Revenue = c(490.1, 573.1),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Advertising = c(248.8, 275.7),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data\ndata_long &lt;- tidyr::pivot_longer(data, cols = c(Government_Funding,Financing_and_other_income, Subscription_fee,Digital, Television), names_to = \"Subcategory\", values_to = \"Value\")\n\n# Plot\nggplot(data_long, aes(x = Category, y = Value, fill = Subcategory)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  coord_flip() +  # Flip the coordinates for horizontal bars\n  geom_bar(data = data, aes(x = Category, y = Total), stat = \"identity\", fill = \"transparent\") +\n  theme_minimal()+\n  labs(y = \"Value (in millions)\", x = \"Year\")\n\n\n\n\n\nlibrary(ggplot2)\n\n# Create example data\ndata &lt;- data.frame(\n  Category = c(\"2017-2018\", \"2018-2019\"),\n  Total = c(1780.8, 1703.8),\n  Government_Funding = c(1213.7, 1207.7),\n  Revenue = c(490.1, 573.1),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Advertising = c(248.8, 275.7),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data\ndata_long &lt;- tidyr::pivot_longer(data, cols = c(Government_Funding, Financing_and_other_income, Subscription_fee, Digital, Television), names_to = \"Subcategory\", values_to = \"Value\")\n\n# Determine the order of stacking\nstacking_order &lt;- c(\"Government_Funding\", \"Financing_and_other_income\", \"Subscription_fee\", \"Television\", \"Digital\")\n\n# Convert Subcategory to factor and set levels according to stacking order\ndata_long$Subcategory &lt;- factor(data_long$Subcategory, levels = stacking_order)\n\n\n\n# Plot\nggplot(data_long, aes(x = Category, y = Value, fill = Subcategory)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  coord_flip() +  # Flip the coordinates for horizontal bars\n  geom_bar(data = data, aes(x = Category, y = Total), stat = \"identity\", fill = \"transparent\") +\n  theme_minimal()\n\n\n\n\n\nlibrary(ggplot2)\nlibrary(plotly)\n\nWarning: package 'plotly' was built under R version 4.3.3\n\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n# Create example data\ndata &lt;- data.frame(\n  Category = c(\"2017-2018\", \"2018-2019\"),\n  Total = c(1780.8, 1703.8),\n  Government_Funding = c(1213.7, 1207.7),\n  Revenue = c(490.1, 573.1),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Advertising = c(248.8, 275.7),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data\ndata_long &lt;- tidyr::pivot_longer(data, cols = c(Government_Funding, Financing_and_other_income, Subscription_fee, Digital, Television), names_to = \"Subcategory\", values_to = \"Value\")\n\n# Determine the order of stacking\nstacking_order &lt;- c(\"Government_Funding\", \"Financing_and_other_income\", \"Subscription_fee\", \"Television\", \"Digital\")\n\n# Convert Subcategory to factor and set levels according to stacking order\ndata_long$Subcategory &lt;- factor(data_long$Subcategory, levels = stacking_order)\n\n# Function to create the plot\ncreate_plot &lt;- function(data, selected_option, selected_year) {\n  p &lt;- ggplot(data, aes(x = Category, y = Value, fill = Subcategory)) +\n    geom_bar(stat = \"identity\", position = \"stack\") +\n    coord_flip() +\n    theme_minimal() +\n    labs(title = selected_option)\n  \n  return(p)\n}\n\n# Create interactive plot\nplotly_plot &lt;- ggplotly(create_plot(data_long, \"Total\"), dynamicTicks = TRUE) %&gt;%\n  layout(\n    updatemenus = list(\n      list(\n        buttons = list(\n          list(method = \"update\", args = list(list(visible = list(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE))), label = \"Total\"),\n          list(method = \"update\", args = list(list(visible = list(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE))), label = \"Government Funding\"),\n          list(method = \"update\", args = list(list(visible = list(FALSE,TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE))), label = \"Revenue\"),\n          list(method = \"update\", args = list(list(visible = list(FALSE,FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE))), label = \"Advertising\")\n        ),\n        x = 0.1,\n        xanchor = \"left\",\n        y = 1.15,\n        yanchor = \"top\",\n        font = list(size = 12)\n      ),\n      list(\n        buttons = list(\n          list(method = \"update\", args = list(list(visible = list(TRUE, TRUE))), label = \"\"),\n          list(method = \"update\", args = list(list(visible = list(TRUE, TRUE))), label = \"\")\n        ),\n        x = 0.3,\n        xanchor = \"left\",\n        y = 1.15,\n        yanchor = \"top\",\n        font = list(size = 12)\n      )\n    )\n  )\n\nplotly_plot\n\n\n\n\n\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Sample data\ndf &lt;- data.frame(\n  Year = c(\"2018-2019\", \"2017-2018\"),\n  `Government Funding` = c(1213.7, 1207.7),\n  `Financing_and_other_income` = c(116.9, 127.6),\n  `Subscription_fee` = c(124.4, 127.2),\n  `Digital` = c(31.0, 42.6),\n  `Television` = c(217.8, 275.7)\n)\n\n# Calculate total revenue for each year\ndf$Revenue &lt;- rowSums(df[, c(\"Financing_and_other_income\", \"Subscription_fee\", \"Digital\", \"Television\")])\n\n# Reshape the data using pivot_longer\ndf_long &lt;- df %&gt;%\n  pivot_longer(cols = -Year, names_to = \"group\", values_to = \"value\") %&gt;%\n  mutate(group = case_when(\n    group %in% c(\"Government Funding\", \"Revenue\") ~ \"Total\",\n    TRUE ~ group\n  ))\n\n# Create a ggplot object\np &lt;- ggplot(df_long, aes(x = Year, y = value, fill = group)) +\n  geom_bar(stat = \"identity\", position = \"stack\", width = 0.7) +\n  \n  scale_y_continuous(labels = scales::comma_format()) +\n  labs(title = \"Funding and Revenue Comparison\",\n       y = \"Count (in millions)\",\n       x = \"Year\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")\n\n# Convert ggplot object to plotly\nplotly_plot &lt;- ggplotly(p, tooltip = c(\"x\", \"y\")) \n\n# Show the interactive plot\nplotly_plot\n\n\n\n\n\n\nlibrary(plotly)\nlibrary(dplyr)\n\n# Sample data\ndf &lt;- data.frame(\n  Year = c(\"2018-2019\", \"2017-2018\"),\n  `Government_Funding` = c(1213.7, 1207.7),\n  `Revenue` = c(490.1, 573.1),\n  `Financing_and_other_income` = c(116.9, 127.6),\n  `Subscriber_fee` = c(124.4, 127.2),\n  `Advertising` = c(248.8, 275.7),\n  `Digital` = c(31, 42.6),\n  `Television` = c(217.8, 275.7)\n)\n\n# Reshape the data\ndf_long &lt;- df %&gt;%\n  pivot_longer(cols = -Year, names_to = \"group\", values_to = \"value\") %&gt;%\n  mutate(group = case_when(\n    group == \"Government_Funding\" ~ \"Government Funding\",\n    group == \"Revenue\" ~ \"Revenue\",\n    group == \"Financing_and_other_income\" ~ \"Financing and other income\",\n    group == \"Subscriber_fee\" ~ \"Subscriber fee\",\n    group == \"Advertising\" ~ \"Advertising\",\n    group == \"Digital\" ~ \"Digital\",\n    group == \"Television\" ~ \"Television\"\n  ))\n\n# Create interactive stacked bar chart\nplot &lt;- plot_ly(df_long, x = ~Year, y = ~value, type = 'bar', color = ~group,\n                text = ~paste(\"Value: \", value),\n                hoverinfo = \"text\") %&gt;%\n  layout(\n    title = \"Government Funding and Revenue Comparison\",\n    xaxis = list(title = \"Year\"),\n    yaxis = list(title = \"Count (in millions)\"),\n    barmode = 'stack',\n    showlegend = TRUE\n  )\n\n# Add dropdown selectors for transparency\nplot &lt;- plot %&gt;%\n  layout(\n    updatemenus = list(\n      list(\n        buttons = list(\n          list(args = list(\"opacity\", 1), label = \"Full opacity\", method = \"restyle\"),\n          list(args = list(\"opacity\", 0.7), label = \"70% opacity\", method = \"restyle\"),\n          list(args = list(\"opacity\", 0.5), label = \"50% opacity\", method = \"restyle\"),\n          list(args = list(\"opacity\", 0.3), label = \"30% opacity\", method = \"restyle\"),\n          list(args = list(\"opacity\", 0), label = \"No opacity\", method = \"restyle\")\n        ),\n        x = 0.9,\n        y = 1.2,\n        direction = \"down\",\n        showactive = TRUE\n      )\n    )\n  )\n\n# Show the plot\nplot\n\n\n\n\n\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Sample data\ndf &lt;- data.frame(\n  Year = c(\"2018-2019\", \"2017-2018\"),\n  Government_Funding = c(1213.7, 1207.7),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data using pivot_longer\ndf_long &lt;- df %&gt;%\n  pivot_longer(cols = -Year, names_to = \"Category\", values_to = \"Value\") \n\n# Plotting using ggplot\np &lt;- ggplot(df_long, aes(x = Category, y = Value, color = Year, group = Year)) +\n  geom_line() +\n  geom_point() +\n  labs(title = \"Funding and Revenue Comparison\",\n       y = \"Value\",\n       x = \"Category\") +\n  theme_minimal()+\n       theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Convert ggplot object to plotly\nplotly_plot &lt;- ggplotly(p, tooltip = c(\"x\", \"y\")) \n\n# Show the interactive plot\nplotly_plot\n\n\n\n\n\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(shiny)\n\nWarning: package 'shiny' was built under R version 4.3.3\n\n# Sample data\ndf &lt;- data.frame(\n  Year = c(\"2018-2019\", \"2017-2018\"),\n  Government_Funding = c(1213.7, 1207.7),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data using pivot_longer\ndf_long &lt;- df %&gt;%\n  pivot_longer(cols = -Year, names_to = \"Category\", values_to = \"Value\") \n\n# UI for Shiny app\nui &lt;- fluidPage(\n  titlePanel(\"Funding and Revenue Comparison\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"year\", \"Select Year:\", choices = unique(df$Year))\n    ),\n    mainPanel(\n      plotlyOutput(\"plot\")\n    )\n  )\n)\n\n# Server logic for Shiny app\nserver &lt;- function(input, output) {\n  filtered_data &lt;- reactive({\n    df_long %&gt;%\n      filter(Year == input$year)\n  })\n  \n  output$plot &lt;- renderPlotly({\n    p &lt;- ggplot(filtered_data(), aes(x = Category, y = Value, color = Year, group = Year)) +\n      geom_line() +\n      geom_point() +\n      labs(title = paste(\"Funding and Revenue Comparison for\", input$year),\n           y = \"Value\",\n           x = \"Category\") +\n      theme_minimal()+\n       theme(axis.text.x = element_text(angle = 45, hjust = 1))\n    \n    ggplotly(p, tooltip = c(\"x\", \"y\")) \n  })\n}\n\n# Run the Shiny app\nshinyApp(ui = ui, server = server)\n\nShiny applications not supported in static R Markdown documents\n\n\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(shiny)\n\n# Sample data\ndf &lt;- data.frame(\n  Year = c(\"2018-2019\", \"2017-2018\")\n  ,\n  Government_Funding = c(1213.7, 1207.7),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data using pivot_longer\ndf_long &lt;- df %&gt;%\n  pivot_longer(cols = -Year, names_to = \"Category\", values_to = \"Value\") \n\n# UI for Shiny app\nui &lt;- fluidPage(\n  titlePanel(\"Funding and Revenue Comparison\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"year\", \"Select Year:\", choices = unique(df$Year)),\n      selectInput(\"revenue\", \"Select Revenue Components:\", \n                  choices = c(\"Financing_and_other_income\", \n                              \"Subscription_fee\", \n                              \"Digital\", \n                              \"Television\"))\n    ),\n    mainPanel(\n      plotlyOutput(\"plot\")\n    )\n  )\n)\n\n# Server logic for Shiny app\nserver &lt;- function(input, output) {\n  filtered_data &lt;- reactive({\n    df_long %&gt;%\n      filter(Year == input$year)\n  })\n  \n  revenue_data &lt;- reactive({\n    df_long %&gt;%\n      filter(Year == input$year & Category == input$revenue)\n  })\n  \n  output$plot &lt;- renderPlotly({\n    p &lt;- ggplot(filtered_data(), aes(x = Category, y = Value, color = Year, group = Year)) +\n      geom_line() +\n      geom_point() +\n      geom_line(data = revenue_data(), aes(group = NULL), color = \"black\", size = 1.5) +\n      geom_point(data = revenue_data(), color = \"black\", size = 3) +\n      labs(title = paste(\"Funding and Revenue Comparison for\", input$year),\n           y = \"Value\",\n           x = \"Category\") +\n      theme_minimal() +\n      theme(axis.text.x = element_text(angle = 45, hjust = 1))\n    \n    ggplotly(p, tooltip = c(\"x\", \"y\")) \n  })\n}\n\n# Run the Shiny app\nshinyApp(ui = ui, server = server)\n\nShiny applications not supported in static R Markdown documents\n\n\n\nserver &lt;- function(input, output) {\n  filtered_data &lt;- reactive({\n    df_long %&gt;%\n      filter(Year == input$year)\n  })\n  \n  revenue_data &lt;- reactive({\n    if (!is.null(input$type) && input$type == \"Revenue\") {\n      df_long %&gt;%\n        filter(Category != \"Government_Funding\", Year == input$year)\n    } \n    else if (!is.null(input$type) && input$type == \"Advertising\") {\n      df_long %&gt;%\n        filter(Category %in% c(\"Digital\",\"Television\"), Year == input$year)\n    }\n  })\n  \n  output$plot &lt;- renderPlotly({\n    p &lt;- ggplot(filtered_data(), aes(x = Category, y = Value, color = Year, group = Year)) +\n      geom_line() +\n      geom_point() +\n      geom_point(data = revenue_data(), color = \"black\", size = 3) +\n      labs(title = paste(\"Funding and Revenue Comparison for\", input$year),\n           y = \"Value\",\n           x = \"Category\") +\n      theme_minimal() +\n      theme(axis.text.x = element_text(angle = 45, hjust = 1))\n    \n    if (!is.null(input$type)) {\n      if (input$type == \"Revenue\") {\n        p &lt;- p + geom_line(data = revenue_data(), aes(group = Year), color = \"black\", size = 1.5)\n      } else if (input$type == \"Advertising\") {\n        p &lt;- p + geom_line(data = revenue_data(), aes(group = Year), color = \"black\", size = 1)\n      }\n    }\n    \n    ggplotly(p, tooltip = c(\"x\", \"y\")) \n  })\n}\n\n# Run the Shiny app\nshinyApp(ui = ui, server = server)\n\nShiny applications not supported in static R Markdown documents"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "As a graduate student brimming with enthusiasm and dedication, I’m on the lookout for opportunities where I can put my excellent communication, teamwork, and organizational abilities to good use. Throughout my academic journey and involvement in campus activities, I’ve honed these skills, and now I’m eager to apply them in a practical setting. I’m flexible and ready to take on any role that comes my way, with the goal of making a positive difference in the university community while also learning valuable lessons for my future career."
  },
  {
    "objectID": "index.html#revanth-karumajji",
    "href": "index.html#revanth-karumajji",
    "title": "Welcome",
    "section": "",
    "text": "As a graduate student brimming with enthusiasm and dedication, I’m on the lookout for opportunities where I can put my excellent communication, teamwork, and organizational abilities to good use. Throughout my academic journey and involvement in campus activities, I’ve honed these skills, and now I’m eager to apply them in a practical setting. I’m flexible and ready to take on any role that comes my way, with the goal of making a positive difference in the university community while also learning valuable lessons for my future career."
  },
  {
    "objectID": "Projects.html",
    "href": "Projects.html",
    "title": "Projects",
    "section": "",
    "text": "Using Design Expert software and Design of Experiments, the Response Surface Optimization of process parameters, such as reaction time, mass percentage of catalyst (NaOH), and volumetric percentage of methanol to oil, was carried out in the production of biodiesel from used cooking oil.\n\nAnalysis of Variance and multiple regression analysis were used to check the p-values, model summaries, regression equations and the percentage contribution of each component.\nThe optimized biodiesel was tested for its properties, compared to ASTM and EN standards, and found to be within limits.\nPerformance test and emission test were conducted in 4 Stroke diesel engine for different blends"
  },
  {
    "objectID": "Projects.html#response-surface-optimization-of-biodiesel-from-used-cooking-oil-for-the-application-in-ci-engine-sept22-apr-23",
    "href": "Projects.html#response-surface-optimization-of-biodiesel-from-used-cooking-oil-for-the-application-in-ci-engine-sept22-apr-23",
    "title": "Projects",
    "section": "",
    "text": "Using Design Expert software and Design of Experiments, the Response Surface Optimization of process parameters, such as reaction time, mass percentage of catalyst (NaOH), and volumetric percentage of methanol to oil, was carried out in the production of biodiesel from used cooking oil.\n\nAnalysis of Variance and multiple regression analysis were used to check the p-values, model summaries, regression equations and the percentage contribution of each component.\nThe optimized biodiesel was tested for its properties, compared to ASTM and EN standards, and found to be within limits.\nPerformance test and emission test were conducted in 4 Stroke diesel engine for different blends"
  },
  {
    "objectID": "Projects.html#working-with-automatic-strapping-machine-in-steel-rolling-mill-feb-23-mar-23",
    "href": "Projects.html#working-with-automatic-strapping-machine-in-steel-rolling-mill-feb-23-mar-23",
    "title": "Projects",
    "section": "Working with Automatic Strapping Machine in Steel Rolling Mill | Feb 23 – Mar 23",
    "text": "Working with Automatic Strapping Machine in Steel Rolling Mill | Feb 23 – Mar 23\nWe had an opportunity to intern at Light and Medium Merchant Mill (LMMM) section at Visakhapatnam Steel Plant.\n\nLearn how steel is produced starting from raw materials.\nExperienced how data is collected and analysed for examining steel rolls failures.\nStudied how Billets are transformed to bars in LMMM and the worked with Automatic Strapping Machine."
  },
  {
    "objectID": "Projects.html#design-of-knuckle-joint-model-in-catia-v5-aug-22",
    "href": "Projects.html#design-of-knuckle-joint-model-in-catia-v5-aug-22",
    "title": "Projects",
    "section": "Design of Knuckle Joint Model in CATIA V5 | Aug 22",
    "text": "Design of Knuckle Joint Model in CATIA V5 | Aug 22\nProject work to obtain hands on experience after the 5 day CATIA modelling training..\n\nUtilized CATIA V5 software to design and create individual components of the Knuckle joint, gaining a thorough understanding of its construction."
  },
  {
    "objectID": "Projects.html#from-concept-to-creation-manufacturing-an-electric-go-kart-nov21-aug-22",
    "href": "Projects.html#from-concept-to-creation-manufacturing-an-electric-go-kart-nov21-aug-22",
    "title": "Projects",
    "section": "From Concept to Creation: Manufacturing an Electric Go-Kart | Nov21 – Aug 22",
    "text": "From Concept to Creation: Manufacturing an Electric Go-Kart | Nov21 – Aug 22\nWe fabricated an Electric go kart for the first time in our campus and participated in Go-Kart Design Challenge competition. 30 students from five different departments worked together to create an electric kart from beginning to end.\n\nWorked as in charge of power department which played crucial role in selecting motor and battery specification.\nManufactured 60V 75Ah Li-ion battery under expert supervision\nDeveloped a business model for an indoor go-kart entertainment park. For better understanding the preferences and needs of potential customers, we conducted surveys and employed data visualization techniques to analyze and present the collected data effectively."
  },
  {
    "objectID": "Projects.html#collecting-technical-data-for-animated-videos-on-non-destructive-testing-a-comprehensive-investigation-may-21-may-22",
    "href": "Projects.html#collecting-technical-data-for-animated-videos-on-non-destructive-testing-a-comprehensive-investigation-may-21-may-22",
    "title": "Projects",
    "section": "Collecting Technical Data for Animated Videos on Non-Destructive Testing: A Comprehensive Investigation | May 21 – May 22",
    "text": "Collecting Technical Data for Animated Videos on Non-Destructive Testing: A Comprehensive Investigation | May 21 – May 22\nGroup of 4 students collaborated with iNuCom India Limited in Hyderabad, India, to prepare technical data for the creation of animation videos for non-destructive techniques (NDT).\n\nTransformed unstructured data to structured data.\nCollected all the required data for 8 modules of NDT and explained the working of each process, along with an overview of the different components utilized in each module."
  }
]
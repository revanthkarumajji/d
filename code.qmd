---
title: "code"
---

---
author: "Revanth Karumajji"
date: "2024-03-11"
output:
  pdf_document: default
  word_document: default
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r}
# Load necessary libraries
library(ggplot2)

# Create example data
data <- data.frame(
  Category = c("2017-2018", "2018-2019"),
  Total = c(1780.8, 1703.8),
  Government_Funding = c(1213.7, 1207.7),
  Revenue = c(490.1, 573.1),
  Financing_and_other_income = c(116.9, 127.6),
  Subscription_fee = c(124.4, 127.2),
  Advertising = c(248.8, 275.7),
  Digital = c(31.0, 42.6),
  Television = c(217.8, 275.7)
)

# Reshape the data
data_long <- tidyr::pivot_longer(data, cols = c(Government_Funding,Financing_and_other_income, Subscription_fee,Digital, Television), names_to = "Subcategory", values_to = "Value")

# Plot
ggplot(data_long, aes(x = Category, y = Value, fill = Subcategory)) +
  geom_bar(stat = "identity", position = "stack") +
  coord_flip() +  # Flip the coordinates for horizontal bars
  geom_bar(data = data, aes(x = Category, y = Total), stat = "identity", fill = "transparent") +
  theme_minimal()+
  labs(y = "Value (in millions)", x = "Year")

```

```{r}
library(ggplot2)

# Create example data
data <- data.frame(
  Category = c("2017-2018", "2018-2019"),
  Total = c(1780.8, 1703.8),
  Government_Funding = c(1213.7, 1207.7),
  Revenue = c(490.1, 573.1),
  Financing_and_other_income = c(116.9, 127.6),
  Subscription_fee = c(124.4, 127.2),
  Advertising = c(248.8, 275.7),
  Digital = c(31.0, 42.6),
  Television = c(217.8, 275.7)
)

# Reshape the data
data_long <- tidyr::pivot_longer(data, cols = c(Government_Funding, Financing_and_other_income, Subscription_fee, Digital, Television), names_to = "Subcategory", values_to = "Value")

# Determine the order of stacking
stacking_order <- c("Government_Funding", "Financing_and_other_income", "Subscription_fee", "Television", "Digital")

# Convert Subcategory to factor and set levels according to stacking order
data_long$Subcategory <- factor(data_long$Subcategory, levels = stacking_order)



# Plot
ggplot(data_long, aes(x = Category, y = Value, fill = Subcategory)) +
  geom_bar(stat = "identity", position = "stack") +
  coord_flip() +  # Flip the coordinates for horizontal bars
  geom_bar(data = data, aes(x = Category, y = Total), stat = "identity", fill = "transparent") +
  theme_minimal()

```

```{r}
library(ggplot2)
library(plotly)

# Create example data
data <- data.frame(
  Category = c("2017-2018", "2018-2019"),
  Total = c(1780.8, 1703.8),
  Government_Funding = c(1213.7, 1207.7),
  Revenue = c(490.1, 573.1),
  Financing_and_other_income = c(116.9, 127.6),
  Subscription_fee = c(124.4, 127.2),
  Advertising = c(248.8, 275.7),
  Digital = c(31.0, 42.6),
  Television = c(217.8, 275.7)
)

# Reshape the data
data_long <- tidyr::pivot_longer(data, cols = c(Government_Funding, Financing_and_other_income, Subscription_fee, Digital, Television), names_to = "Subcategory", values_to = "Value")

# Determine the order of stacking
stacking_order <- c("Government_Funding", "Financing_and_other_income", "Subscription_fee", "Television", "Digital")

# Convert Subcategory to factor and set levels according to stacking order
data_long$Subcategory <- factor(data_long$Subcategory, levels = stacking_order)

# Function to create the plot
create_plot <- function(data, selected_option, selected_year) {
  p <- ggplot(data, aes(x = Category, y = Value, fill = Subcategory)) +
    geom_bar(stat = "identity", position = "stack") +
    coord_flip() +
    theme_minimal() +
    labs(title = selected_option)
  
  return(p)
}

# Create interactive plot
plotly_plot <- ggplotly(create_plot(data_long, "Total"), dynamicTicks = TRUE) %>%
  layout(
    updatemenus = list(
      list(
        buttons = list(
          list(method = "update", args = list(list(visible = list(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE))), label = "Total"),
          list(method = "update", args = list(list(visible = list(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE))), label = "Government Funding"),
          list(method = "update", args = list(list(visible = list(FALSE,TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE))), label = "Revenue"),
          list(method = "update", args = list(list(visible = list(FALSE,FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE))), label = "Advertising")
        ),
        x = 0.1,
        xanchor = "left",
        y = 1.15,
        yanchor = "top",
        font = list(size = 12)
      ),
      list(
        buttons = list(
          list(method = "update", args = list(list(visible = list(TRUE, TRUE))), label = ""),
          list(method = "update", args = list(list(visible = list(TRUE, TRUE))), label = "")
        ),
        x = 0.3,
        xanchor = "left",
        y = 1.15,
        yanchor = "top",
        font = list(size = 12)
      )
    )
  )

plotly_plot

```

```{r}
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)

# Sample data
df <- data.frame(
  Year = c("2018-2019", "2017-2018"),
  `Government Funding` = c(1213.7, 1207.7),
  `Financing_and_other_income` = c(116.9, 127.6),
  `Subscription_fee` = c(124.4, 127.2),
  `Digital` = c(31.0, 42.6),
  `Television` = c(217.8, 275.7)
)

# Calculate total revenue for each year
df$Revenue <- rowSums(df[, c("Financing_and_other_income", "Subscription_fee", "Digital", "Television")])

# Reshape the data using pivot_longer
df_long <- df %>%
  pivot_longer(cols = -Year, names_to = "group", values_to = "value") %>%
  mutate(group = case_when(
    group %in% c("Government Funding", "Revenue") ~ "Total",
    TRUE ~ group
  ))

# Create a ggplot object
p <- ggplot(df_long, aes(x = Year, y = value, fill = group)) +
  geom_bar(stat = "identity", position = "stack", width = 0.7) +
  
  scale_y_continuous(labels = scales::comma_format()) +
  labs(title = "Funding and Revenue Comparison",
       y = "Count (in millions)",
       x = "Year") +
  theme_minimal() +
  theme(legend.position = "bottom")

# Convert ggplot object to plotly
plotly_plot <- ggplotly(p, tooltip = c("x", "y")) 

# Show the interactive plot
plotly_plot


```

```{r}
library(plotly)
library(dplyr)

# Sample data
df <- data.frame(
  Year = c("2018-2019", "2017-2018"),
  `Government_Funding` = c(1213.7, 1207.7),
  `Revenue` = c(490.1, 573.1),
  `Financing_and_other_income` = c(116.9, 127.6),
  `Subscriber_fee` = c(124.4, 127.2),
  `Advertising` = c(248.8, 275.7),
  `Digital` = c(31, 42.6),
  `Television` = c(217.8, 275.7)
)

# Reshape the data
df_long <- df %>%
  pivot_longer(cols = -Year, names_to = "group", values_to = "value") %>%
  mutate(group = case_when(
    group == "Government_Funding" ~ "Government Funding",
    group == "Revenue" ~ "Revenue",
    group == "Financing_and_other_income" ~ "Financing and other income",
    group == "Subscriber_fee" ~ "Subscriber fee",
    group == "Advertising" ~ "Advertising",
    group == "Digital" ~ "Digital",
    group == "Television" ~ "Television"
  ))

# Create interactive stacked bar chart
plot <- plot_ly(df_long, x = ~Year, y = ~value, type = 'bar', color = ~group,
                text = ~paste("Value: ", value),
                hoverinfo = "text") %>%
  layout(
    title = "Government Funding and Revenue Comparison",
    xaxis = list(title = "Year"),
    yaxis = list(title = "Count (in millions)"),
    barmode = 'stack',
    showlegend = TRUE
  )

# Add dropdown selectors for transparency
plot <- plot %>%
  layout(
    updatemenus = list(
      list(
        buttons = list(
          list(args = list("opacity", 1), label = "Full opacity", method = "restyle"),
          list(args = list("opacity", 0.7), label = "70% opacity", method = "restyle"),
          list(args = list("opacity", 0.5), label = "50% opacity", method = "restyle"),
          list(args = list("opacity", 0.3), label = "30% opacity", method = "restyle"),
          list(args = list("opacity", 0), label = "No opacity", method = "restyle")
        ),
        x = 0.9,
        y = 1.2,
        direction = "down",
        showactive = TRUE
      )
    )
  )

# Show the plot
plot

```

```{r}
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)

# Sample data
df <- data.frame(
  Year = c("2018-2019", "2017-2018"),
  Government_Funding = c(1213.7, 1207.7),
  Financing_and_other_income = c(116.9, 127.6),
  Subscription_fee = c(124.4, 127.2),
  Digital = c(31.0, 42.6),
  Television = c(217.8, 275.7)
)

# Reshape the data using pivot_longer
df_long <- df %>%
  pivot_longer(cols = -Year, names_to = "Category", values_to = "Value") 

# Plotting using ggplot
p <- ggplot(df_long, aes(x = Category, y = Value, color = Year, group = Year)) +
  geom_line() +
  geom_point() +
  labs(title = "Funding and Revenue Comparison",
       y = "Value",
       x = "Category") +
  theme_minimal()+
       theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Convert ggplot object to plotly
plotly_plot <- ggplotly(p, tooltip = c("x", "y")) 

# Show the interactive plot
plotly_plot

```

```{r}
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
library(shiny)

# Sample data
df <- data.frame(
  Year = c("2018-2019", "2017-2018"),
  Government_Funding = c(1213.7, 1207.7),
  Financing_and_other_income = c(116.9, 127.6),
  Subscription_fee = c(124.4, 127.2),
  Digital = c(31.0, 42.6),
  Television = c(217.8, 275.7)
)

# Reshape the data using pivot_longer
df_long <- df %>%
  pivot_longer(cols = -Year, names_to = "Category", values_to = "Value") 

# UI for Shiny app
ui <- fluidPage(
  titlePanel("Funding and Revenue Comparison"),
  sidebarLayout(
    sidebarPanel(
      selectInput("year", "Select Year:", choices = unique(df$Year))
    ),
    mainPanel(
      plotlyOutput("plot")
    )
  )
)

# Server logic for Shiny app
server <- function(input, output) {
  filtered_data <- reactive({
    df_long %>%
      filter(Year == input$year)
  })
  
  output$plot <- renderPlotly({
    p <- ggplot(filtered_data(), aes(x = Category, y = Value, color = Year, group = Year)) +
      geom_line() +
      geom_point() +
      labs(title = paste("Funding and Revenue Comparison for", input$year),
           y = "Value",
           x = "Category") +
      theme_minimal()+
       theme(axis.text.x = element_text(angle = 45, hjust = 1))
    
    ggplotly(p, tooltip = c("x", "y")) 
  })
}

# Run the Shiny app
shinyApp(ui = ui, server = server)

```

```{r}
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
library(shiny)

# Sample data
df <- data.frame(
  Year = c("2018-2019", "2017-2018")
  ,
  Government_Funding = c(1213.7, 1207.7),
  Financing_and_other_income = c(116.9, 127.6),
  Subscription_fee = c(124.4, 127.2),
  Digital = c(31.0, 42.6),
  Television = c(217.8, 275.7)
)

# Reshape the data using pivot_longer
df_long <- df %>%
  pivot_longer(cols = -Year, names_to = "Category", values_to = "Value") 

# UI for Shiny app
ui <- fluidPage(
  titlePanel("Funding and Revenue Comparison"),
  sidebarLayout(
    sidebarPanel(
      selectInput("year", "Select Year:", choices = unique(df$Year)),
      selectInput("revenue", "Select Revenue Components:", 
                  choices = c("Financing_and_other_income", 
                              "Subscription_fee", 
                              "Digital", 
                              "Television"))
    ),
    mainPanel(
      plotlyOutput("plot")
    )
  )
)

# Server logic for Shiny app
server <- function(input, output) {
  filtered_data <- reactive({
    df_long %>%
      filter(Year == input$year)
  })
  
  revenue_data <- reactive({
    df_long %>%
      filter(Year == input$year & Category == input$revenue)
  })
  
  output$plot <- renderPlotly({
    p <- ggplot(filtered_data(), aes(x = Category, y = Value, color = Year, group = Year)) +
      geom_line() +
      geom_point() +
      geom_line(data = revenue_data(), aes(group = NULL), color = "black", size = 1.5) +
      geom_point(data = revenue_data(), color = "black", size = 3) +
      labs(title = paste("Funding and Revenue Comparison for", input$year),
           y = "Value",
           x = "Category") +
      theme_minimal() +
      theme(axis.text.x = element_text(angle = 45, hjust = 1))
    
    ggplotly(p, tooltip = c("x", "y")) 
  })
}

# Run the Shiny app
shinyApp(ui = ui, server = server)

```

```{r}
server <- function(input, output) {
  filtered_data <- reactive({
    df_long %>%
      filter(Year == input$year)
  })
  
  revenue_data <- reactive({
    if (!is.null(input$type) && input$type == "Revenue") {
      df_long %>%
        filter(Category != "Government_Funding", Year == input$year)
    } 
    else if (!is.null(input$type) && input$type == "Advertising") {
      df_long %>%
        filter(Category %in% c("Digital","Television"), Year == input$year)
    }
  })
  
  output$plot <- renderPlotly({
    p <- ggplot(filtered_data(), aes(x = Category, y = Value, color = Year, group = Year)) +
      geom_line() +
      geom_point() +
      geom_point(data = revenue_data(), color = "black", size = 3) +
      labs(title = paste("Funding and Revenue Comparison for", input$year),
           y = "Value",
           x = "Category") +
      theme_minimal() +
      theme(axis.text.x = element_text(angle = 45, hjust = 1))
    
    if (!is.null(input$type)) {
      if (input$type == "Revenue") {
        p <- p + geom_line(data = revenue_data(), aes(group = Year), color = "black", size = 1.5)
      } else if (input$type == "Advertising") {
        p <- p + geom_line(data = revenue_data(), aes(group = Year), color = "black", size = 1)
      }
    }
    
    ggplotly(p, tooltip = c("x", "y")) 
  })
}

# Run the Shiny app
shinyApp(ui = ui, server = server)


```
